 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/lsps", type: :request do
  # Lsp. As you add validations to Lsp, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { regNo: 200000001 }
  }

  let(:invalid_attributes) {
    { regNo: 2000000010 }
  }

  let(:superuser)      { User.create(givenname: 'New', sn: 'User', ou: 'COM', email: 'new.user@sheffield.ac.uk', role: 'Superuser') }
  context 'As a Superuser' do

    before do
      login_as superuser
    end


    describe "GET /show" do
      it "renders a successful response" do
        lsp = Lsp.create! valid_attributes
        get lsp_url(lsp)
        expect(response).to be_successful
      end
    end

    describe "GET /new" do
      it "renders a successful response" do
        get new_lsp_url
        expect(response).to be_successful
      end
    end

    describe "GET /edit" do
      it "render a successful response" do
        lsp = Lsp.create! valid_attributes
        get edit_lsp_url(lsp)
        expect(response).to be_successful
      end
    end

    describe "POST /create" do
      context "with valid parameters" do
        it "creates a new Lsp" do
          expect {
            post lsps_url, params: { lsp: valid_attributes }
          }.to change(Lsp, :count).by(1)
        end

        it "redirects to the created lsp" do
          post lsps_url, params: { lsp: valid_attributes }
          expect(response).to redirect_to(lsp_url(Lsp.last))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Lsp" do
          expect {
            post lsps_url, params: { lsp: invalid_attributes }
          }.to change(Lsp, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post lsps_url, params: { lsp: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    describe "PATCH /update" do
      context "with valid parameters" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested lsp" do
          lsp = Lsp.create! valid_attributes
          patch lsp_url(lsp), params: { lsp: new_attributes }
          lsp.reload
          skip("Add assertions for updated state")
        end

        it "redirects to the lsp" do
          lsp = Lsp.create! valid_attributes
          patch lsp_url(lsp), params: { lsp: new_attributes }
          lsp.reload
          expect(response).to redirect_to(lsp_url(lsp))
        end
      end

      context "with invalid parameters" do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          lsp = Lsp.create! valid_attributes
          patch lsp_url(lsp), params: { lsp: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    describe "DELETE /destroy" do
      it "destroys the requested lsp" do
        lsp = Lsp.create! valid_attributes
        expect {
          delete lsp_url(lsp)
        }.to change(Lsp, :count).by(-1)
      end

      it "redirects to the lsps list" do
        lsp = Lsp.create! valid_attributes
        delete lsp_url(lsp)
        expect(response).to redirect_to(lsps_url)
      end
    end
  end
end
